{"version":3,"file":"static/js/566.608e8d2f.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactForm.js","components/Container/CommonContainer.js","redux/selectors.js","hooks/hooks.js","pages/AddContact.js"],"sourcesContent":["import { Button, FormControl, FormLabel, Input, Icon } from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\nimport React from 'react';\nimport * as yup from 'yup';\nimport { RiPhoneFill, RiUserFill, RiUserAddFill } from \"react-icons/ri\";\nimport { useContacts } from 'hooks/hooks';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { addContact } from 'redux/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst initialValues = {\n  name: \"\",\n  number: \"\",\n};\n\nexport const ContactForm = () => {\n\n  const contacts = useContacts();\n  const dispatch = useDispatch();\n\n  const isReplicated = ({ name, number }) => {\n    const normalizedContactName = name.toLowerCase().trim();\n    const normalizedContactNumber = number.trim();\n    const replicatedContactName = contacts.find(contact => {\n      return (contact.name.toLowerCase().trim() === normalizedContactName && contact.number.trim() === normalizedContactNumber)\n    });\n\n    return Boolean(replicatedContactName);\n  }\n\n  const onAddContact = ({ name, number }) => {\n\n    isReplicated({ name, number })\n      ? toast('This contact is already in your Phonebook!', { icon: 'ðŸ‘»', })\n      : dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        onAddContact({ ...values });\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormControl isRequired>\n          <FormLabel htmlFor='name'><Icon as={RiUserFill} />Name</FormLabel>\n          <Field as={Input} id='name' name='name' type='text' placeholder='Enter contact name' />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel htmlFor='number'><Icon as={RiPhoneFill} />Number</FormLabel>\n          <Field as={Input} id='number' name='number' type='tel' placeholder='Enter contact phone number' />\n        </FormControl>\n        <Button type='submit'><Icon as={RiUserAddFill} />Add contact</Button>\n      </Form>\n    </Formik>\n  )\n};","import { Container } from '@chakra-ui/react';\nimport React from 'react';\n\nexport const CommonContainer = ({ children }) => {\n  return (\n    <Container width={['container.sm', 'container.md', 'container.lg', 'container.xl']}>\n      {children}\n    </Container>\n  )\n}","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) {\n      return contacts;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(({ name, number }) =>\n        name.toLowerCase().trim().includes(normalizedFilter) ||\n        number.trim().includes(normalizedFilter)\n    );\n    return filteredContacts;\n  }\n);","import { useSelector } from 'react-redux';\nimport { selectIsLoggedIn, selectIsRefreshing, selectUser } from 'redux/auth/selectors';\nimport { selectContacts, selectFilter, selectError, selectFilteredContacts, selectIsLoading } from 'redux/selectors';\n\nexport const useAuth = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const user = useSelector(selectUser);\n\n  return {\n    isLoggedIn,\n    isRefreshing,\n    user,\n  };\n};\n\nexport const useContacts = () => useSelector(selectContacts);\nexport const useFilter = () => useSelector(selectFilter);\nexport const useFilteredContacts = () => useSelector(selectFilteredContacts);\nexport const useIsLoading = () => useSelector(selectIsLoading);\nexport const useError = () => useSelector(selectError);","import { ContactForm } from 'components/ContactsForm/ContactForm';\nimport { CommonContainer } from 'components/Container/CommonContainer';\nimport React from 'react';\n\nconst AddContact = () => {\n  return (\n    <CommonContainer>\n      <ContactForm />\n    </CommonContainer>\n  )\n};\n\nexport default AddContact;"],"names":["schema","yup","shape","name","required","number","initialValues","ContactForm","contacts","useContacts","dispatch","useDispatch","onAddContact","normalizedContactName","toLowerCase","trim","normalizedContactNumber","replicatedContactName","find","contact","Boolean","isReplicated","addContact","toast","icon","validationSchema","onSubmit","values","actions","console","log","resetForm","isRequired","htmlFor","as","RiUserFill","Input","id","type","placeholder","RiPhoneFill","RiUserAddFill","CommonContainer","children","width","selectContacts","state","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","normalizedFilter","includes","useSelector","useFilter","useFilteredContacts","useIsLoading","useError"],"sourceRoot":""}